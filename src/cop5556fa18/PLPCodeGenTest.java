package cop5556fa18;

import static org.junit.Assert.assertEquals;

import java.io.FileOutputStream;
import java.io.OutputStream;
import java.lang.reflect.Method;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556fa18.PLPCodeGenUtils.DynamicClassLoader;
import cop5556fa18.PLPAST.Program;

public class PLPCodeGenTest {	
	//determines whether show prints anything
		static boolean doPrint = true;
		
		static void show(Object s) {
			if (doPrint) {
				System.out.println(s);
			}
		}

		//determines whether a classfile is created
		static boolean doCreateFile = false;
		
		@Rule
		public ExpectedException thrown = ExpectedException.none();
		

		//values passed to CodeGenerator constructor to control grading and debugging output
		private boolean devel = true; //if true, print devel output
		private boolean grade = true; //if true, print grade output
		
		/**
		 * Generates bytecode for given input.
		 * Throws exceptions for Lexical, Syntax, and Type checking errors
		 * 
		 * @param input   String containing source code
		 * @return        Generated bytecode
		 * @throws Exception
		 */
		byte[] genCode(String input) throws Exception {
			
			//scan, parse, and type check
			PLPScanner scanner = new PLPScanner(input);
			show(input);
			scanner.scan();
			PLPParser parser = new PLPParser(scanner);
			Program program = parser.parse();
			PLPTypeChecker v = new PLPTypeChecker();
			program.visit(v, null);
//			show(program);  //It may be useful useful to show this here if code generation fails

			//generate code
			PLPCodeGen cv = new PLPCodeGen(null, devel, grade);
			byte[] bytecode = (byte[]) program.visit(cv, null);
			show(program); //doing it here shows the values filled in during code gen
			//display the generated bytecode
			show(PLPCodeGenUtils.bytecodeToString(bytecode));
			
			//write byte code to file 
			if (doCreateFile) {
				String name = ((Program) program).name;
				String classFileName = "bin/" + name + ".class";
				OutputStream output = new FileOutputStream(classFileName);
				output.write(bytecode);
				output.close();
				System.out.println("wrote classfile to " + classFileName);
			}
			
			//return generated classfile as byte array
			return bytecode;
		}
		
		/**
		 * Run main method in given class
		 * 
		 * @param className    
		 * @param bytecode    
		 * @param commandLineArgs  String array containing command line arguments, empty array if none
		 * @throws + 
		 * @throws Throwable 
		 */
		void runCode(String className, byte[] bytecode) throws Exception  {
			PLPRuntimeLog.initLog(); //initialize log used for grading.
			DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
			Class<?> testClass = loader.define(className, bytecode);
			String[] commandLineArgs = {};
			@SuppressWarnings("rawtypes")
			Class[] argTypes = {commandLineArgs.getClass()};
			Method m = testClass.getMethod("main", argTypes );
			show("Output from " + m + ":");  //print name of method to be executed
			Object passedArgs[] = {commandLineArgs};//create array containing params, in this case a single array.
			//show(passedArgs);
			try {
			m.invoke(null, passedArgs);	
			}
			catch (Exception e) {
				Throwable cause = e.getCause();
				if (cause instanceof Exception) {
					Exception ec = (Exception) e.getCause();
					throw ec;
				}
				throw  e;
			}
		}
		
		/**
		 * Since we are not doing any optimization, the compiler will 
		 * still create a class with a main method and the JUnit test will
		 * execute it.  
		 * 
		 * The only thing it will do is append the "entering main" and "leaving main" messages to the log.
		 * 
		 * @throws Exception
		 */
		/*@Test
		public void emptyProg() throws Exception {
			String prog = "emptyProg";	
			String input = prog + "{}";
			byte[] bytecode = genCode(input);
			runCode(prog, bytecode);
			show("Log:\n "+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}*/
		/*@Test
		public void integerLit() throws Exception {
			String prog = "intgegerLit";
			String input = prog + "{boolean a=true; boolean b=false; print(b>a);}";
			//String input = prog + "{string a=\"4a\";string b=\"3b\";string c=b+a;print(c+a);}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1.6;leaving main;",PLPRuntimeLog.globalLog.toString());
		}*/
		
		/*string + string*/
		@Test
		public void testCase1() throws Exception {
			String prog = "testCase1";
			String input = prog + "{string a = \"test\"; string b = \" case\"; string c = \" 1\"; a = a + b + c; print(a); print(b); print(c);}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;test case 1; case; 1;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		/*while loop*/
		@Test
		public void testCase2() throws Exception {
			String prog = "testCase2";
			String input = prog + "{int a; a = 1; while(a<3){a=a+1;print(a);};}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2;3;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		/*condition*/
		@Test
		public void testCase3() throws Exception {
			String prog = "testCase3";
			String input = prog + "{int a,b; a = 1; float c = 1.5; if(a>=0){float d = 3.0; print(c); c = c + d; print(c);};print(c);}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1.5;4.5;4.5;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		/*local variable*/
		@Test
		public void testCase4() throws Exception {
			String prog = "testCase4";
			String input = prog + " {\n"
					+ "\tchar a='d';\n"
					+ "\tboolean b = true;\n"
					+ "\tif(true){\n"
					+ "\t\tfloat a=2.2;\n"
					+ "\t\twhile(b){\n"
					+ "\t\t\tstring a=\"testCase4\";\n"
					+ "\t\t\tprint(a);\n"
					+ "\t\t\tb=false;\n"
					+ "\t\t};\n"
					+ "\t\tprint(a);\n"
					+ "\t};\n"
					+ "\tprint(a);\n"
					+ "}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;testCase4;2.2;d;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		/*calculation*/
		@Test
		public void testCase5() throws Exception {
			String prog = "testCase5";
			String input = prog + " {\n"
			+ "\tfloat a,b,c;\n"
			+ "\tc = 0.0;\n"
			+ "\tint d = 3;\n"
			+ "\ta = 3.3;\n"
			+ "\tif(a + d > 6.2){\n"
			+ "\t\tb = 2.5;\n"
			+ "\t\tc = b + a;\n"
			+ "\t\tprint(c);\n"
			+ "\t};\n"
			+ "\tprint(c + d);\n"
			+ "}";
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;5.8;8.8;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		/*assign multiple times*/
		@Test
		public void testCase6() throws Exception {
			String prog = "testCase6";
			String input = prog + " {\n"
					+ "\tint b=7;\n"
					+ "\tint a;\n"
					+ "\tint c = 10;\n"
					+ "\ta=3;\n"
					+ "\ta=4;\n"
					+ "\tint d= 9;\n"
					+ "\tprint(a);\n"
			+ "}";
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;4;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		/*calculation*/
		@Test
		public void testCase7() throws Exception {
			String prog = "testCase7";
			String input = prog + " {\n"
					+ "\tint a = 3;\n"
					+ "\tfloat b;\n"
					+ "\tb = a + 0.4;\n"
					+ "\tfloat c = (a+b)*a;\n"
					+ "\tprint(c);\n"
			+ "}";
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;19.2;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		/*comprehensive 1*/
		@Test
		public void testCase8() throws Exception {
			String prog = "testCase8";
			String input = prog + "{\n" + 
					"	int a=3;\n" + 
					"	int b,c,d;\n" + 
					"	b=2;\n" + 
					"	c=5;\n" + 
					"	d=6;\n" + 
					"	int avg = (a+b+c+d)/4;\n" + 
					"	boolean result = avg == 5?true:false;\n" + 
					"	print(result);\n" + 
					"	if(a==3|b<=1){\n" + 
					"		print(a==3|b<=1);\n" + 
					"		char c = 'x';\n" + 
					"		if(true&avg>6){\n" + 
					"			print(true&avg>6);\n" + 
					"			a=0;\n" + 
					"		};\n" + 
					"		print(c);\n" + 
					"	};\n" + 
					"	print(a);\n" + 
					"}";
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;false;true;x;3;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		/*comprehensive 2*/
		@Test
		public void testCase9() throws Exception {
			String prog = "testCase9";
			String input = prog + "{\n" + 
					"	float a = 0.1;\n" + 
					"	while(a<=0.5){\n" + 
					"		print(a);\n" + 
					"		a = a + 0.1;\n" + 
					"		if(a>0.5){\n" + 
					"			a = 70.3;\n" + 
					"		};\n" + 
					"	};\n" + 
					"	print(a);\n" + 
					"}";
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;0.1;0.2;0.3;0.4;0.5;70.3;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		/*comprehensive 3*/
		@Test
		public void testCase10() throws Exception {
			String prog = "testCase10";
			String input = prog + "{\n" + 
					"	int a = 0;\n" + 
					"	int b;\n" + 
					"	b=0;\n" + 
					"	while(b <= 10){\n" + 
					"		a=a+2;\n" + 
					"		if(b<a){\n" + 
					"			a=b;\n" + 
					"		};\n" + 
					"		b=b+1;\n" + 
					"		print(a);\n" + 
					"		print(b);\n" + 
					"	}; \n" + 
					"}";
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;0;1;1;2;2;3;3;4;4;5;5;6;6;7;7;8;8;9;9;10;10;11;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		/*comprehensive 4*/
		@Test
		public void testCase11() throws Exception {
			String prog = "testCase11";
			String input = prog + "{\n"
					+ "int a = 3;"
					+ "int b;"
					+ "b=2;"
					+ "if(a==3){"
					//+ "a=a-1;"
					+ "b=2**b;"
					+ "print(b);"
					+ "};"				
					+ "}";
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;4;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		@Test
		public void testCase12() throws Exception {
			String prog = "testCase11";
			String input = prog+" {print !1; print !-1; print !0; print !-2;}";
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;-2;0;-1;1;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
}
